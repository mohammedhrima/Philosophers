data race !

mandatory:

    inputs:
        number of philosophers
        time to die
        time to eat
        time to sleep
        number of meals (optional)

    exit:
        when someone died
        when all philos did eat number of meals

    structs:
        shared:
            time_to_eat
            time_to_die
            time_to_sleep
            number_of_philos
            number_of_meals

            all_alive
            all_philos_did_eat_number_of_meals

            printing_mutex
            check_mutex        
        
        philo:
            index

            last_time_did_eat (will be set to current time at the beginning)
            last_time_did_eat_mutex
            
            thread
            fork_mutex
            
            *shared (pointer to shared)
            *next

    routine: (will keep looping while all_alive)
        eat:
            philo->last_time_did_eat = current_time + time_to_eat 
            philo->all_philos_did_eat_number_of_meals++;
        sleep
        think

    in checker:
        if current_time - last_time_did_eat >= time_to_die
            all_alive = 0
        if all_philos_did_eat_number_of_meals == philos_len * number_of_meals
            exit(0);


